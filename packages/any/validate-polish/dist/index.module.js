const t={checksum:(t,e)=>{const r=t.length-1;let n=0;for(let s=0;s<r;++s){n+=parseInt(t.charAt(s),10)*e[s]}const s=n%11;return(10===s?0:s)===parseInt(t.slice(-1),10)},pesel(t){const e=Number(t.substring(2,4));if(!e||e%20>12)return!1;const r=Number(t.substring(4,6));if(!r||r<1||r>31)return!1;if(!/^[0-9]{11}$/u.test(t))return!1;const n=[1,3,7,9],s=`${t}`.split("").map((t=>parseInt(t,10))),[u]=s.splice(-1),i=s.reduce(((t,e,r)=>t+e*n[r%4]))%10;return 10-(0===i?10:i)===u},nip(t){if("string"!=typeof t)return!1;const e=t.replace(/-/gu,"");if(!/^[0-9]{10}$/u.test(e))return!1;const r=String(e).split(""),n=[6,5,7,2,3,4,5,6,7].map(((t,e)=>t*parseInt(r[e],10)));let s=0;n.forEach((t=>{s+=t}));const u=s%11;return parseInt(r[9],10)===u},regon(e){if(!/^[0-9]{9,14}$/u.test(e))return!1;const r=[8,9,2,3,4,5,6,7];if(9===e.length)return t.checksum(e,r);return t.checksum(e.slice(0,9),r)&&t.checksum(e,[2,4,8,5,0,9,7,3,6,1,2,4,8])},identityCard(t){if(!t||9!==t.length)return!1;const e=t.toUpperCase(),r=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],n=t=>{for(let e=0,n=r.length;e<n;e++)if(t===r[e])return e;return-1};for(let t=0;t<3;++t)if(n(e[t])<10)return!1;for(let t=3;t<9;++t)if(n(e[t])<0||n(e[t])>9)return!1;let s=7*n(e[0])+3*n(e[1])+Number(n(e[2]))+7*n(e[4])+3*n(e[5])+Number(n(e[6]))+7*n(e[7])+3*n(e[8]);return s%=10,s===n(e[3])},identityCardWithSeparator(t){return!(!t||10!==t.length)&&((" "===t[3]||"-"===t[3])&&this.identityCard(t.replace(/[\s-]/gu,"")))}};export{t as validatePolish};
